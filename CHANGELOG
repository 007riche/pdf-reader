v0.7.2 (20th May 2008)
- Throw an UnsupportedFeatureError if we try to open an encrypted/secure PDF
- Correctly handle page content instruction sets with trailing whitespace
- Represent PDF Streams with a new object, PDF::Reader::Stream
  - their really wasn't any point in separating the stream content from it's associated dict. You need both
    parts to correctly interpret the content

v0.7.1 (6th May 2008)
- Non-page strings (ie. metadata, etc) are now converted to UTF-8 more accurately
- Fixed a regression between 0.6.2 and 0.7 that prevented difference tables from being applied
  correctly when translating text into UTF-8

v0.7 (6th May 2008)
- API INCOMPATIBLE CHANGE: any hashes that are passed to callbacks use symbols as keys instead of PDF::Reader::Name instances.
- Improved support for converting text in some PDF files to unicode
- Behave as expected if the Contents key in a Page Dict is a reference
- Include some basic metadata callbacks
- Don't interpret a comment token (%) inside a string as a comment
- Small fixes to improve 1.9 compatability
- Improved our Zlib deflating to make it slightly more robust - still some more issues to work out though
- Throw an UnsupportedFeatureError if a pdf that uses XRef streams is opened
- Added an option to PDF::Reader#file and PDF::Reader#string to enable parsing of only parts of a PDF file(ie. only metadata, etc)

v0.6.2 (22nd March 2008)
- Catch low level errors when applying filters to a content stream and raise a MalformedPDFError instead. 
- Added support for processing inline images
- Support for parsing XRef tables that have multiple subsections
- Added a few callbacks to improve the way we supply information on page resources 
- Ignore whitespace in hex strings, as required by the spec (section 3.2.3)
- Use our "unknown character box" when a single character in an Identity-H string fails to decode
- Support ToUnicode CMaps that use the bfrange operator
- Tweaked tokenising code to ensure whitespace doesn't get in the way

v0.6.1 (12th March 2008)
- Tweaked behaviour when we encounter Identity-H encoded text that doesn't have a ToUnicode mapping. We
  just replace each character with a little box.
- Use the same little box when invalid characters are found in other encodings instead of throwing an ugly 
  NoMethodError.
- Added a method to RegisterReceiver that returns all occurances of a callback

v0.6.0 (27th February 2008)
- all text is now transparently converted to UTF-8 before being passed to the callbacks.
  before this version, text was just passed as a byte level copy of what was in the PDF file, which
  was mildly annoying with some encodings, and resulted in garbled text for Unicode encoded text.
- Fonts that use a difference table are now handled correctly
- fixed some 1.9 incompatible syntax
- expanded RegisterReceiver class to record extra info
- expanded rspec coverage
- tweaked a README example

v0.5.1 (1st January 2008)
- Several documentation tweaks
- Improve support for parsing PDFs under windows (thanks to Jari Williamsson)

v0.5 (14th December 2007)
- Initial Release
